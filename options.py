import argparse

parser = argparse.ArgumentParser( description="Training Script for the Galar Capsule Endoscopy paper.")

parser.add_argument_group("Paths")
parser.add_argument("--image_dir", type=str, default="", help="Directory containing images.")
parser.add_argument("--run_prefix", type=str, default="", help="Prefix name of training process. Optional.")
parser.add_argument("--annotation_dir", type=str, default="", help="Directory containing annotation files.")
parser.add_argument("--output_dir", type=str, default="", help="Directory to save the model output to.")
parser.add_argument("--split_path", type=str, help='Where the split files are saved.')

parser.add_argument_group("Hyperparameters")
parser.add_argument("--training_features", type=str, required=True ,help="Classification Problem: Either a single label, or section, technical_multiclass, technical_multilabel")
parser.add_argument("--width", type=int, default=256, help="image width")
parser.add_argument("--height", type=int, default=256, help="image height")
parser.add_argument("--epochs", type=int, default=100, help="number of training epochs")
parser.add_argument("--batch_size", type=int, default=256, help="batch size")
parser.add_argument("--batch_size_validation_factor", type=float, default=1, help="Factor x: batch_size_validation = x*batch_size to account for less GPU memory usage for inference for validation")
parser.add_argument("--learning_rate", type=float, default=1e-4, help="learning rate") 
parser.add_argument("--weight_decay", type=int, default=1e-5, help="weight decay")
parser.add_argument("--j", type=int, default=8, help="Num workers")
parser.add_argument("--pin_memory", type=int, default=True, help="Pin memory for dataloader")
parser.add_argument("--optimizer", type=str, default='adam', choices=['adam', 'sgd', 'adamW'])
parser.add_argument("--model", type=str, default='resnet50', choices=['resnet18', 'resnet50', 'resnet34', 'resnet101', 'resnet152', 'vit_l_32', 'vit_b_16', 'efficientnet_v2_m', 'efficientnet_v2_s', 'inceptionresnetv2', 'efficientnet_b0', 'efficientnet_b1', 'efficientnet_b2'])
parser.add_argument("--freeze", type=int, default=False, help="Freeze all model layers except the last linear classifier")
parser.add_argument("--pretrained", type=int, default=True)
parser.add_argument("--debug", type=int, default=False)
parser.add_argument("--stats_dir", type=str, default="ds_statistics")
parser.add_argument("--step_size", type=int, default=10)
parser.add_argument("--gamma", type=int, default=0.9)
parser.add_argument("--num_folds", type=int, default=2, help='How many folds (k)?')
parser.add_argument("--folds", type=str, required=True, help='Which folds should be run? E.g. 1-2-3-4')
parser.add_argument("--dropout", type=float, default=0.5)
parser.add_argument("--weighted_loss", type=int, default=0, help="Generated weights in loss function.")
parser.add_argument("--weighted_sampling", type=int, default=0)
parser.add_argument("--downsample_factor", type=int, help='Use downsample_factor > 1 to downsample the bigger classes relative to the smallest class', default=1)
parser.add_argument("--weights", type=str, default='', help='Set custom class weights. If weighted_sampling is activated and weights="": Will use generated weights.')
parser.add_argument("--static_random_downsampling", default=0, help="Alternative imbalance mitigation technique: Randomly select some images for each class which will be used for all epochs. Uses weights parameter. Choose x (number of images per class) with x=#images_of_class*weight[class] for each class in training and validation. The selection is consistent over all training epochs")
parser.add_argument("--dual_output", action="store_true", help="Use two model outputs for binary classification instead of thresholding.")

parser.add_argument("--mlflow_path", type=str, default="mlflow", help="Output folder for MLFlow experiment tracking.")